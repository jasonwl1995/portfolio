{"ast":null,"code":"import _regeneratorRuntime from \"/Users/j.lin/prime/tier3/art-galore-solo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(artworkSaga),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(fetchArtworkDetails),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(addArtwork),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(editArtwork),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(deleteArtwork),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(addLike),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(fetchLikes);\n\nimport axios from 'axios';\nimport { put, takeLatest } from 'redux-saga/effects';\n\nfunction artworkSaga() {\n  return _regeneratorRuntime.wrap(function artworkSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return takeLatest('FETCH_ARTWORK_DETAIL', fetchArtworkDetail);\n\n        case 2:\n          _context.next = 4;\n          return takeLatest('ADD_ARTWORK', addArtwork);\n\n        case 4:\n          _context.next = 6;\n          return takeLatest('EDIT_ARTWORK', editArtwork);\n\n        case 6:\n          _context.next = 8;\n          return takeLatest('DELETE_ARTWORK', deleteArtwork);\n\n        case 8:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n} //how to use a global flag??\n\n\nvar DEBUG = true; // //   Get all artwork from database\n// function* fetchUserArtwork(action) {\n//   try {\n//     // need for credentials ???\n//     const response = yield axios.get(`/api/artwork/${action.payload.userid}`);\n//     //if success, set the data to store\n//     if (response.status === 200)\n//     {\n//       yield put({ type: 'SET_ARTWORK', payload: response.data});\n//     }\n//   } catch (error) {\n//     console.log('fetch artwork request failed', error);\n//   }\n// }\n// // DISCOVER HOME PAGE\n// function* discoverGalleryArtwork(action) {\n//   try {\n//     const response = yield axios.get(`/api/artwork/discovergallery/${action.payload.userid}`);\n//     //if success, set the data to store\n//     if (response.status === 200)\n//     {\n//       yield put({ type: 'SET_ARTWORK', payload: response.data});\n//     }\n//   } catch (error) {\n//     console.log('fetch other artwork request failed', error);\n//   }\n// }\n// Get artwork detail from database\n\nfunction fetchArtworkDetails(action) {\n  var details;\n  return _regeneratorRuntime.wrap(function fetchArtworkDetails$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          console.log('fetch details', action.payload);\n          _context2.prev = 1;\n          _context2.next = 4;\n          return axios.get(\"/api/artwork/detail/\".concat(action.payload.artworkid));\n\n        case 4:\n          details = _context2.sent;\n          console.log('GET ARTWORK details', details.data);\n          _context2.next = 8;\n          return put({\n            type: 'SET_DETAILS',\n            payload: details.data\n          });\n\n        case 8:\n          _context2.next = 13;\n          break;\n\n        case 10:\n          _context2.prev = 10;\n          _context2.t0 = _context2[\"catch\"](1);\n          console.log('get detail error', _context2.t0);\n\n        case 13:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[1, 10]]);\n} // worker Saga: will be fired on \"ADD_ARTWORK\" actions\n// Post new artwork to database\n\n\nfunction addArtwork(action) {\n  var data, response;\n  return _regeneratorRuntime.wrap(function addArtwork$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          data = action.payload;\n\n          if (DEBUG) {\n            console.log('start of addArtwork, data=', data);\n          }\n\n          _context3.prev = 2;\n          _context3.next = 5;\n          return axios.post('/api/artwork', data);\n\n        case 5:\n          response = _context3.sent;\n          _context3.next = 11;\n          break;\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](2);\n          console.log('Category get request failed', _context3.t0);\n\n        case 11:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[2, 8]]);\n}\n\nfunction editArtwork(action) {\n  return _regeneratorRuntime.wrap(function editArtwork$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return axios.put('/api/artwork/', action.payload);\n\n        case 3:\n          _context4.next = 5;\n          return put({\n            type: 'FETCH_DETAIL',\n            payload: artwork.id\n          });\n\n        case 5:\n          _context4.next = 10;\n          break;\n\n        case 7:\n          _context4.prev = 7;\n          _context4.t0 = _context4[\"catch\"](0);\n          console.log(' SAGA ERROR PUT', err);\n\n        case 10:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[0, 7]]);\n} // worker Saga: will be fired on \"DETELE_ARTWORK\" actions, artowrk id should be in action.payload\n\n\nfunction deleteArtwork(action) {\n  var response;\n  return _regeneratorRuntime.wrap(function deleteArtwork$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return axios.delete(\"/api/artwork/\".concat(action.payload.artworkid));\n\n        case 3:\n          response = _context5.sent;\n\n          if (!(response.status === 200)) {\n            _context5.next = 7;\n            break;\n          }\n\n          _context5.next = 7;\n          return put({\n            type: 'FETCH_USER_ARTWORK',\n            payload: {\n              userid: action.payload.userid\n            }\n          });\n\n        case 7:\n          _context5.next = 12;\n          break;\n\n        case 9:\n          _context5.prev = 9;\n          _context5.t0 = _context5[\"catch\"](0);\n          console.log('delete artwork request failed', _context5.t0);\n\n        case 12:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 9]]);\n}\n\nfunction addLike(action) {\n  return _regeneratorRuntime.wrap(function addLike$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          console.log('in addLike', action.payload); // post favorite to database\n\n          _context6.prev = 1;\n          _context6.next = 4;\n          return axios.post(\"/api/likes/\", action.payload);\n\n        case 4:\n          _context6.next = 6;\n          return put({\n            // put is dispatching the information to be grabbed by whoever.\n            type: 'FETCH_LIKES' // this is being caught by RootSaga which is then being sent to function fetchFavorites()\n\n          });\n\n        case 6:\n          _context6.next = 11;\n          break;\n\n        case 8:\n          _context6.prev = 8;\n          _context6.t0 = _context6[\"catch\"](1);\n          console.log('Error in LIKES post', _context6.t0);\n\n        case 11:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6, null, [[1, 8]]);\n} // end addFavorite\n\n\nfunction fetchLikes() {\n  var response;\n  return _regeneratorRuntime.wrap(function fetchLikes$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.prev = 0;\n          _context7.next = 3;\n          return axios.get('/api/likes');\n\n        case 3:\n          response = _context7.sent;\n          _context7.next = 6;\n          return put({\n            type: 'SET_LIKES',\n            payload: response.data\n          });\n\n        case 6:\n          _context7.next = 11;\n          break;\n\n        case 8:\n          _context7.prev = 8;\n          _context7.t0 = _context7[\"catch\"](0);\n          console.log('fetch error', _context7.t0);\n\n        case 11:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7, null, [[0, 8]]);\n} // end fetchFavorites\n\n\nexport default artworkSaga;","map":{"version":3,"sources":["/Users/j.lin/prime/tier3/art-galore-solo/src/redux/sagas/artwork.saga.js"],"names":["artworkSaga","fetchArtworkDetails","addArtwork","editArtwork","deleteArtwork","addLike","fetchLikes","axios","put","takeLatest","fetchArtworkDetail","DEBUG","action","console","log","payload","get","artworkid","details","data","type","post","response","artwork","id","err","delete","status","userid"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { put, takeLatest } from 'redux-saga/effects';\n\nfunction* artworkSaga() {\n  // yield takeLatest('FETCH_USER_ARTWORK', fetchUserArtwork);\n  // yield takeLatest('DISCOVER_GALLERY_ARTWORK', discoverGalleryArtwork);   //discover gallery\n\n  yield takeLatest('FETCH_ARTWORK_DETAIL', fetchArtworkDetail);\n\n  yield takeLatest('ADD_ARTWORK', addArtwork);\n  yield takeLatest('EDIT_ARTWORK', editArtwork);\n  yield takeLatest('DELETE_ARTWORK', deleteArtwork);\n}\n//how to use a global flag??\nconst DEBUG=true;\n\n// //   Get all artwork from database\n// function* fetchUserArtwork(action) {\n//   try {\n//     // need for credentials ???\n//     const response = yield axios.get(`/api/artwork/${action.payload.userid}`);\n//     //if success, set the data to store\n//     if (response.status === 200)\n//     {\n//       yield put({ type: 'SET_ARTWORK', payload: response.data});\n//     }\n\n//   } catch (error) {\n//     console.log('fetch artwork request failed', error);\n//   }\n// }\n\n// // DISCOVER HOME PAGE\n// function* discoverGalleryArtwork(action) {\n\n//   try {\n//     const response = yield axios.get(`/api/artwork/discovergallery/${action.payload.userid}`);\n//     //if success, set the data to store\n//     if (response.status === 200)\n//     {\n//       yield put({ type: 'SET_ARTWORK', payload: response.data});\n//     }\n\n//   } catch (error) {\n//     console.log('fetch other artwork request failed', error);\n//   }\n// }\n\n// Get artwork detail from database\nfunction* fetchArtworkDetails(action){\n  console.log('fetch details', action.payload);\n  try{\n    const details = yield axios.get(`/api/artwork/detail/${action.payload.artworkid}`);\n    console.log('GET ARTWORK details', details.data);\n    yield put({\n      type: 'SET_DETAILS',\n      payload: details.data,\n    });\n  } catch(err) {\n    console.log('get detail error', err);\n  }\n}\n// worker Saga: will be fired on \"ADD_ARTWORK\" actions\n\n// Post new artwork to database\nfunction* addArtwork(action) {\n\n    let data = action.payload;\n\n    if (DEBUG) {\n        console.log('start of addArtwork, data=', data);\n    }\n\n    try {\n      // need for credentials ???\n      const response = \n      yield axios.post('/api/artwork', data);\n\n      // if (DEBUG)\n      // {\n      //     console.log('response is:', response);\n      //     console.log('response status is:', response.status);\n      //     console.log('response data is:', response.data);\n      // }\n\n\n      // //need to set up message to let use know the status of adding artwork\n      // //if (response.data === 'OK')\n      // if (response.status === 200)\n      // {\n      //   yield put({ type: 'SET_ACTION_MSG', payload: 'The artwork has been successfully added'});\n      // }\n      // else\n      // {\n      //   yield put({ type: 'SET_ACTION_MSG', payload: 'Failed adding the artwork. Please try again.' });\n      // }\n\n    } catch (error) {\n      console.log('Category get request failed', error);\n    }\n}\n\nfunction* editArtwork(action) {\n  try {\n    yield axios.put('/api/artwork/', action.payload);\n    yield put({\n      type:'FETCH_DETAIL',\n      payload: artwork.id\n      })\n  } catch (error) {\n    console.log(' SAGA ERROR PUT', err);\n  }\n}\n\n// worker Saga: will be fired on \"DETELE_ARTWORK\" actions, artowrk id should be in action.payload\nfunction* deleteArtwork(action) {\n  try {\n    // need for credentials ???\n    const response = yield axios.delete(`/api/artwork/${action.payload.artworkid}`);\n\n    //if successfully deteled the artwork, need to refresh store with database data, so kick off a FETCH....\n    if (response.status === 200)\n    {\n      yield put({ \n        type: 'FETCH_USER_ARTWORK', \n        payload: {userid: action.payload.userid}\n      });\n    }\n\n  } catch (error) {\n    console.log('delete artwork request failed', error);\n  }\n}\n\nfunction* addLike(action) {\n  console.log('in addLike', action.payload);\n\n  // post favorite to database\n  try {\n    yield axios.post(`/api/likes/`, action.payload); // this is the url from the user clicking the fav button.\n\n    // update favoriteReducer\n    yield put({\n      // put is dispatching the information to be grabbed by whoever.\n      type: 'FETCH_LIKES', // this is being caught by RootSaga which is then being sent to function fetchFavorites()\n    });\n  } catch (err) {\n    console.log('Error in LIKES post', err);\n  }\n} // end addFavorite\n\nfunction* fetchLikes() {\n  try {\n    let response = yield axios.get('/api/likes');\n    yield put({\n      type: 'SET_LIKES',\n      payload: response.data,\n    });\n  } catch (err) {\n    console.log('fetch error', err);\n  }\n} // end fetchFavorites\n\n\nexport default artworkSaga;\n"]},"metadata":{},"sourceType":"module"}