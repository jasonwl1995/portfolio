{"ast":null,"code":"/**\n * Taken, CommonJS-ified, and heavily modified from:\n * https://github.com/flyingsparx/NodeDirectUploader\n */\nS3Upload.prototype.server = '';\nS3Upload.prototype.signingUrl = '/sign-s3';\nS3Upload.prototype.signingUrlMethod = 'GET';\nS3Upload.prototype.signingUrlSuccessResponses = [200, 201];\nS3Upload.prototype.fileElement = null;\nS3Upload.prototype.files = null;\n\nS3Upload.prototype.onFinishS3Put = function (signResult, file) {\n  return console.log('base.onFinishS3Put()', signResult.publicUrl);\n};\n\nS3Upload.prototype.preprocess = function (file, next) {\n  console.log('base.preprocess()', file);\n  return next(file);\n};\n\nS3Upload.prototype.onProgress = function (percent, status, file) {\n  return console.log('base.onProgress()', percent, status);\n};\n\nS3Upload.prototype.onError = function (status, file) {\n  return console.log('base.onError()', status);\n};\n\nS3Upload.prototype.scrubFilename = function (filename) {\n  return filename.replace(/[^\\w\\d_\\-\\.]+/ig, '');\n};\n\nfunction S3Upload(options) {\n  if (options == null) {\n    options = {};\n  }\n\n  for (var option in options) {\n    if (options.hasOwnProperty(option)) {\n      this[option] = options[option];\n    }\n  }\n\n  var files = this.fileElement ? this.fileElement.files : this.files || [];\n  this.handleFileSelect(files);\n}\n\nS3Upload.prototype.handleFileSelect = function (files) {\n  var result = [];\n\n  for (var i = 0; i < files.length; i++) {\n    var file = files[i];\n    this.preprocess(file, function (processedFile) {\n      this.onProgress(0, 'Waiting', processedFile);\n      result.push(this.uploadFile(processedFile));\n      return result;\n    }.bind(this));\n  }\n};\n\nS3Upload.prototype.createCORSRequest = function (method, url, opts) {\n  var opts = opts || {};\n  var xhr = new XMLHttpRequest();\n\n  if (xhr.withCredentials != null) {\n    xhr.open(method, url, true);\n\n    if (opts.withCredentials != null) {\n      xhr.withCredentials = opts.withCredentials;\n    }\n  } else if (typeof XDomainRequest !== \"undefined\") {\n    xhr = new XDomainRequest();\n    xhr.open(method, url);\n  } else {\n    xhr = null;\n  }\n\n  return xhr;\n};\n\nS3Upload.prototype.executeOnSignedUrl = function (file, callback) {\n  var fileName = this.scrubFilename(file.name);\n  var queryString = '?objectName=' + this.s3path + fileName + '&contentType=' + encodeURIComponent(file.type);\n\n  if (this.signingUrlQueryParams) {\n    var signingUrlQueryParams = typeof this.signingUrlQueryParams === 'function' ? this.signingUrlQueryParams() : this.signingUrlQueryParams;\n    Object.keys(signingUrlQueryParams).forEach(function (key) {\n      var val = signingUrlQueryParams[key];\n      queryString += '&' + key + '=' + val;\n    });\n  }\n\n  var xhr = this.createCORSRequest(this.signingUrlMethod, this.server + this.signingUrl + queryString, {\n    withCredentials: this.signingUrlWithCredentials\n  });\n\n  if (this.signingUrlHeaders) {\n    var signingUrlHeaders = typeof this.signingUrlHeaders === 'function' ? this.signingUrlHeaders() : this.signingUrlHeaders;\n    Object.keys(signingUrlHeaders).forEach(function (key) {\n      var val = signingUrlHeaders[key];\n      xhr.setRequestHeader(key, val);\n    });\n  }\n\n  xhr.overrideMimeType && xhr.overrideMimeType('text/plain; charset=x-user-defined');\n\n  xhr.onreadystatechange = function () {\n    if (xhr.readyState === 4 && this.signingUrlSuccessResponses.indexOf(xhr.status) >= 0) {\n      var result;\n\n      try {\n        result = JSON.parse(xhr.responseText);\n      } catch (error) {\n        this.onError('Invalid response from server', file);\n        return false;\n      }\n\n      return callback(result);\n    } else if (xhr.readyState === 4 && this.signingUrlSuccessResponses.indexOf(xhr.status) < 0) {\n      return this.onError('Could not contact request signing server. Status = ' + xhr.status, file);\n    }\n  }.bind(this);\n\n  return xhr.send();\n};\n\nS3Upload.prototype.uploadToS3 = function (file, signResult) {\n  var xhr = this.createCORSRequest('PUT', signResult.signedUrl);\n\n  if (!xhr) {\n    this.onError('CORS not supported', file);\n  } else {\n    xhr.onload = function () {\n      if (xhr.status === 200) {\n        this.onProgress(100, 'Upload completed', file);\n        return this.onFinishS3Put(signResult, file);\n      } else {\n        return this.onError('Upload error: ' + xhr.status, file);\n      }\n    }.bind(this);\n\n    xhr.onerror = function () {\n      return this.onError('XHR error', file);\n    }.bind(this);\n\n    xhr.upload.onprogress = function (e) {\n      var percentLoaded;\n\n      if (e.lengthComputable) {\n        percentLoaded = Math.round(e.loaded / e.total * 100);\n        return this.onProgress(percentLoaded, percentLoaded === 100 ? 'Finalizing' : 'Uploading', file);\n      }\n    }.bind(this);\n  }\n\n  xhr.setRequestHeader('Content-Type', file.type);\n\n  if (this.contentDisposition) {\n    var disposition = this.contentDisposition;\n\n    if (disposition === 'auto') {\n      if (file.type.substr(0, 6) === 'image/') {\n        disposition = 'inline';\n      } else {\n        disposition = 'attachment';\n      }\n    }\n\n    var fileName = this.scrubFilename(file.name);\n    xhr.setRequestHeader('Content-Disposition', disposition + '; filename=\"' + fileName + '\"');\n  }\n\n  if (signResult.headers) {\n    var signResultHeaders = signResult.headers;\n    Object.keys(signResultHeaders).forEach(function (key) {\n      var val = signResultHeaders[key];\n      xhr.setRequestHeader(key, val);\n    });\n  }\n\n  if (this.uploadRequestHeaders) {\n    var uploadRequestHeaders = this.uploadRequestHeaders;\n    Object.keys(uploadRequestHeaders).forEach(function (key) {\n      var val = uploadRequestHeaders[key];\n      xhr.setRequestHeader(key, val);\n    });\n  } else {\n    xhr.setRequestHeader('x-amz-acl', 'public-read');\n  }\n\n  this.httprequest = xhr;\n  return xhr.send(file);\n};\n\nS3Upload.prototype.uploadFile = function (file) {\n  var uploadToS3Callback = this.uploadToS3.bind(this, file);\n  if (this.getSignedUrl) return this.getSignedUrl(file, uploadToS3Callback);\n  return this.executeOnSignedUrl(file, uploadToS3Callback);\n};\n\nS3Upload.prototype.abortUpload = function () {\n  this.httprequest && this.httprequest.abort();\n};\n\nmodule.exports = S3Upload;","map":{"version":3,"sources":["/Users/j.lin/prime/tier3/art-galore-solo/node_modules/react-s3-uploader/s3upload.js"],"names":["S3Upload","prototype","server","signingUrl","signingUrlMethod","signingUrlSuccessResponses","fileElement","files","onFinishS3Put","signResult","file","console","log","publicUrl","preprocess","next","onProgress","percent","status","onError","scrubFilename","filename","replace","options","option","hasOwnProperty","handleFileSelect","result","i","length","processedFile","push","uploadFile","bind","createCORSRequest","method","url","opts","xhr","XMLHttpRequest","withCredentials","open","XDomainRequest","executeOnSignedUrl","callback","fileName","name","queryString","s3path","encodeURIComponent","type","signingUrlQueryParams","Object","keys","forEach","key","val","signingUrlWithCredentials","signingUrlHeaders","setRequestHeader","overrideMimeType","onreadystatechange","readyState","indexOf","JSON","parse","responseText","error","send","uploadToS3","signedUrl","onload","onerror","upload","onprogress","e","percentLoaded","lengthComputable","Math","round","loaded","total","contentDisposition","disposition","substr","headers","signResultHeaders","uploadRequestHeaders","httprequest","uploadToS3Callback","getSignedUrl","abortUpload","abort","module","exports"],"mappings":"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","sourcesContent":["/**\n * Taken, CommonJS-ified, and heavily modified from:\n * https://github.com/flyingsparx/NodeDirectUploader\n */\n\nS3Upload.prototype.server = '';\nS3Upload.prototype.signingUrl = '/sign-s3';\nS3Upload.prototype.signingUrlMethod = 'GET';\nS3Upload.prototype.signingUrlSuccessResponses = [200, 201];\nS3Upload.prototype.fileElement = null;\nS3Upload.prototype.files = null;\n\nS3Upload.prototype.onFinishS3Put = function(signResult, file) {\n    return console.log('base.onFinishS3Put()', signResult.publicUrl);\n};\n\nS3Upload.prototype.preprocess = function(file, next) {\n    console.log('base.preprocess()', file);\n    return next(file);\n};\n\nS3Upload.prototype.onProgress = function(percent, status, file) {\n    return console.log('base.onProgress()', percent, status);\n};\n\nS3Upload.prototype.onError = function(status, file) {\n    return console.log('base.onError()', status);\n};\n\nS3Upload.prototype.scrubFilename = function(filename) {\n    return filename.replace(/[^\\w\\d_\\-\\.]+/ig, '');\n};\n\nfunction S3Upload(options) {\n    if (options == null) {\n        options = {};\n    }\n    for (var option in options) {\n        if (options.hasOwnProperty(option)) {\n            this[option] = options[option];\n        }\n    }\n    var files = this.fileElement ? this.fileElement.files : this.files || [];\n    this.handleFileSelect(files);\n}\n\nS3Upload.prototype.handleFileSelect = function(files) {\n    var result = [];\n    for (var i=0; i < files.length; i++) {\n        var file = files[i];\n        this.preprocess(file, function(processedFile){\n          this.onProgress(0, 'Waiting', processedFile);\n          result.push(this.uploadFile(processedFile));\n          return result;\n        }.bind(this));\n    }\n};\n\nS3Upload.prototype.createCORSRequest = function(method, url, opts) {\n    var opts = opts || {};\n    var xhr = new XMLHttpRequest();\n\n    if (xhr.withCredentials != null) {\n        xhr.open(method, url, true);\n        if (opts.withCredentials != null) {\n            xhr.withCredentials = opts.withCredentials;\n        }\n    }\n    else if (typeof XDomainRequest !== \"undefined\") {\n        xhr = new XDomainRequest();\n        xhr.open(method, url);\n    }\n    else {\n        xhr = null;\n    }\n    return xhr;\n};\n\nS3Upload.prototype.executeOnSignedUrl = function(file, callback) {\n    var fileName = this.scrubFilename(file.name);\n    var queryString = '?objectName=' + this.s3path + fileName + '&contentType=' + encodeURIComponent(file.type);\n    if (this.signingUrlQueryParams) {\n        var signingUrlQueryParams = typeof this.signingUrlQueryParams === 'function' ? this.signingUrlQueryParams() : this.signingUrlQueryParams;\n        Object.keys(signingUrlQueryParams).forEach(function(key) {\n            var val = signingUrlQueryParams[key];\n            queryString += '&' + key + '=' + val;\n        });\n    }\n    var xhr = this.createCORSRequest(this.signingUrlMethod,\n        this.server + this.signingUrl + queryString, { withCredentials: this.signingUrlWithCredentials });\n    if (this.signingUrlHeaders) {\n        var signingUrlHeaders = typeof this.signingUrlHeaders === 'function' ? this.signingUrlHeaders() : this.signingUrlHeaders;\n        Object.keys(signingUrlHeaders).forEach(function(key) {\n            var val = signingUrlHeaders[key];\n            xhr.setRequestHeader(key, val);\n        });\n    }\n    xhr.overrideMimeType && xhr.overrideMimeType('text/plain; charset=x-user-defined');\n    xhr.onreadystatechange = function() {\n        if (xhr.readyState === 4 && this.signingUrlSuccessResponses.indexOf(xhr.status) >= 0) {\n            var result;\n            try {\n                result = JSON.parse(xhr.responseText);\n            } catch (error) {\n                this.onError('Invalid response from server', file);\n                return false;\n            }\n            return callback(result);\n        } else if (xhr.readyState === 4 && this.signingUrlSuccessResponses.indexOf(xhr.status) < 0) {\n            return this.onError('Could not contact request signing server. Status = ' + xhr.status, file);\n        }\n    }.bind(this);\n    return xhr.send();\n};\n\nS3Upload.prototype.uploadToS3 = function(file, signResult) {\n    var xhr = this.createCORSRequest('PUT', signResult.signedUrl);\n    if (!xhr) {\n        this.onError('CORS not supported', file);\n    } else {\n        xhr.onload = function() {\n            if (xhr.status === 200) {\n                this.onProgress(100, 'Upload completed', file);\n                return this.onFinishS3Put(signResult, file);\n            } else {\n                return this.onError('Upload error: ' + xhr.status, file);\n            }\n        }.bind(this);\n        xhr.onerror = function() {\n            return this.onError('XHR error', file);\n        }.bind(this);\n        xhr.upload.onprogress = function(e) {\n            var percentLoaded;\n            if (e.lengthComputable) {\n                percentLoaded = Math.round((e.loaded / e.total) * 100);\n                return this.onProgress(percentLoaded, percentLoaded === 100 ? 'Finalizing' : 'Uploading', file);\n            }\n        }.bind(this);\n    }\n    xhr.setRequestHeader('Content-Type', file.type);\n    if (this.contentDisposition) {\n        var disposition = this.contentDisposition;\n        if (disposition === 'auto') {\n            if (file.type.substr(0, 6) === 'image/') {\n                disposition = 'inline';\n            } else {\n                disposition = 'attachment';\n            }\n        }\n\n        var fileName = this.scrubFilename(file.name)\n        xhr.setRequestHeader('Content-Disposition', disposition + '; filename=\"' + fileName + '\"');\n    }\n    if (signResult.headers) {\n        var signResultHeaders = signResult.headers\n        Object.keys(signResultHeaders).forEach(function(key) {\n            var val = signResultHeaders[key];\n            xhr.setRequestHeader(key, val);\n        })\n    }\n    if (this.uploadRequestHeaders) {\n        var uploadRequestHeaders = this.uploadRequestHeaders;\n        Object.keys(uploadRequestHeaders).forEach(function(key) {\n            var val = uploadRequestHeaders[key];\n            xhr.setRequestHeader(key, val);\n        });\n    } else {\n        xhr.setRequestHeader('x-amz-acl', 'public-read');\n    }\n    this.httprequest = xhr;\n    return xhr.send(file);\n};\n\nS3Upload.prototype.uploadFile = function(file) {\n    var uploadToS3Callback = this.uploadToS3.bind(this, file);\n\n    if(this.getSignedUrl) return this.getSignedUrl(file, uploadToS3Callback);\n    return this.executeOnSignedUrl(file, uploadToS3Callback);\n};\n\nS3Upload.prototype.abortUpload = function() {\n    this.httprequest && this.httprequest.abort();\n};\n\n\nmodule.exports = S3Upload;\n"]},"metadata":{},"sourceType":"script"}