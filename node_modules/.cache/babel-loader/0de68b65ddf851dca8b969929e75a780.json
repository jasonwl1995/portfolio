{"ast":null,"code":"import _objectSpread from \"/Users/j.lin/prime/tier3/art-galore-solo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"/Users/j.lin/prime/tier3/art-galore-solo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/j.lin/prime/tier3/art-galore-solo/src/components/ProtectedRoute/ProtectedRoute.jsx\";\nimport React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport LoginPage from '../LoginPage/LoginPage';\nimport { useSelector } from 'react-redux'; // A Custom Wrapper Component -- This will keep our code DRY.\n// Responsible for watching redux state, and returning an appropriate component\n// API for this component is the same as a regular route\n// THIS IS NOT SECURITY! That must be done on the server\n// A malicious user could change the code and see any view\n// so your server-side route must implement real security\n// by checking req.isAuthenticated for authentication\n// and by checking req.user for authorization\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ProtectedRoute(props) {\n  var user = useSelector(function (store) {\n    return store.user;\n  }); // Using destructuring, this takes ComponentToProtect from component\n  // prop and grabs all other props to pass them along to Route\n\n  var authRedirect = props.authRedirect,\n      otherProps = _objectWithoutProperties(props, [\"authRedirect\"]); // Component may be passed in as as prop, or as a child\n\n\n  var ComponentToProtect = props.component || function () {\n    return props.children;\n  };\n\n  var ComponentToShow;\n\n  if (user.id) {\n    // if the user is logged in (only logged in users have ids)\n    // show the component that is protected\n    ComponentToShow = ComponentToProtect;\n  } else {\n    // if they are not logged in, check the loginMode on Redux State\n    // if the mode is 'login', show the LoginPage\n    ComponentToShow = LoginPage;\n  } // redirect a logged in user if an authRedirect prop has been provided\n\n\n  if (user.id && authRedirect != null) {\n    return /*#__PURE__*/_jsxDEV(Redirect, {\n      exact: true,\n      from: otherProps.path,\n      to: authRedirect\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 12\n    }, this);\n  } else if (!user.id && authRedirect != null) {\n    ComponentToShow = ComponentToProtect;\n  } // We return a Route component that gets added to our list of routes\n\n\n  return /*#__PURE__*/_jsxDEV(Route // all props like 'exact' and 'path' that were passed in\n  // are now passed along to the 'Route' Component\n  , _objectSpread(_objectSpread({}, otherProps), {}, {\n    children: /*#__PURE__*/_jsxDEV(ComponentToShow, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\n\nexport default ProtectedRoute;","map":{"version":3,"sources":["/Users/j.lin/prime/tier3/art-galore-solo/src/components/ProtectedRoute/ProtectedRoute.jsx"],"names":["React","Route","Redirect","LoginPage","useSelector","ProtectedRoute","props","user","store","authRedirect","otherProps","ComponentToProtect","component","children","ComponentToShow","id","path"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,kBAAhC;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,SAAQC,WAAR,QAA0B,aAA1B,C,CAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;AAEA,SAASC,cAAT,CAAwBC,KAAxB,EAA+B;AAC7B,MAAMC,IAAI,GAAGH,WAAW,CAAC,UAACI,KAAD;AAAA,WAAWA,KAAK,CAACD,IAAjB;AAAA,GAAD,CAAxB,CAD6B,CAG7B;AACA;;AAJ6B,MAO3BE,YAP2B,GASzBH,KATyB,CAO3BG,YAP2B;AAAA,MAQxBC,UARwB,4BASzBJ,KATyB,qBAW7B;;;AACA,MAAMK,kBAAkB,GAAGL,KAAK,CAACM,SAAN,IAAoB;AAAA,WAAMN,KAAK,CAACO,QAAZ;AAAA,GAA/C;;AAEA,MAAIC,eAAJ;;AAEA,MAAIP,IAAI,CAACQ,EAAT,EAAa;AACX;AACA;AACAD,IAAAA,eAAe,GAAGH,kBAAlB;AACD,GAJD,MAIO;AACL;AACA;AACAG,IAAAA,eAAe,GAAGX,SAAlB;AACD,GAxB4B,CA2B7B;;;AACA,MAAII,IAAI,CAACQ,EAAL,IAAWN,YAAY,IAAI,IAA/B,EAAqC;AACnC,wBAAO,QAAC,QAAD;AAAU,MAAA,KAAK,MAAf;AAAgB,MAAA,IAAI,EAAEC,UAAU,CAACM,IAAjC;AAAuC,MAAA,EAAE,EAAEP;AAA3C;AAAA;AAAA;AAAA;AAAA,YAAP;AACD,GAFD,MAEO,IAAI,CAACF,IAAI,CAACQ,EAAN,IAAYN,YAAY,IAAI,IAAhC,EAAsC;AAC3CK,IAAAA,eAAe,GAAGH,kBAAlB;AACD,GAhC4B,CAkC7B;;;AACA,sBACE,QAAC,KAAD,CACE;AACA;AAFF,oCAGMD,UAHN;AAAA,2BAKE,QAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AALF;AAAA;AAAA;AAAA;AAAA,UADF;AAUD;;AAED,eAAeL,cAAf","sourcesContent":["import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport LoginPage from '../LoginPage/LoginPage';\nimport {useSelector} from 'react-redux';\n\n// A Custom Wrapper Component -- This will keep our code DRY.\n// Responsible for watching redux state, and returning an appropriate component\n// API for this component is the same as a regular route\n\n// THIS IS NOT SECURITY! That must be done on the server\n// A malicious user could change the code and see any view\n// so your server-side route must implement real security\n// by checking req.isAuthenticated for authentication\n// and by checking req.user for authorization\n\nfunction ProtectedRoute(props) {\n  const user = useSelector((store) => store.user);\n\n  // Using destructuring, this takes ComponentToProtect from component\n  // prop and grabs all other props to pass them along to Route\n  const {\n    // redirect path to be used if the user is authorized\n    authRedirect,\n    ...otherProps\n  } = props;\n\n  // Component may be passed in as as prop, or as a child\n  const ComponentToProtect = props.component || (() => props.children);\n\n  let ComponentToShow;\n\n  if (user.id) {\n    // if the user is logged in (only logged in users have ids)\n    // show the component that is protected\n    ComponentToShow = ComponentToProtect;\n  } else {\n    // if they are not logged in, check the loginMode on Redux State\n    // if the mode is 'login', show the LoginPage\n    ComponentToShow = LoginPage;\n  }\n\n\n  // redirect a logged in user if an authRedirect prop has been provided\n  if (user.id && authRedirect != null) {\n    return <Redirect exact from={otherProps.path} to={authRedirect} />;\n  } else if (!user.id && authRedirect != null) {\n    ComponentToShow = ComponentToProtect;\n  }\n\n  // We return a Route component that gets added to our list of routes\n  return (\n    <Route\n      // all props like 'exact' and 'path' that were passed in\n      // are now passed along to the 'Route' Component\n      {...otherProps}\n    >\n      <ComponentToShow />\n    </Route>\n\n  );\n}\n\nexport default ProtectedRoute;\n"]},"metadata":{},"sourceType":"module"}