{"ast":null,"code":"import _regeneratorRuntime from \"/Users/j.lin/prime/tier3/art-galore-solo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(dpCategorySaga),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(fetchActiveCategory),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(fetchActiveCategoryByUser),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(fetchActiveArtwork),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(fetchActiveArtworkByUser);\n\nimport axios from 'axios';\nimport { put, takeLatest } from 'redux-saga/effects'; // Creates categorySAGA Generator function\n\nfunction dpCategorySaga() {\n  return _regeneratorRuntime.wrap(function dpCategorySaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return takeLatest('FETCH_ACTIVE_CATEGORY', fetchActiveCategory);\n\n        case 2:\n          _context.next = 4;\n          return takeLatest('FETCH_ACTIVE_CATEGORY_BY_USER', fetchActiveCategoryByUser);\n\n        case 4:\n          _context.next = 6;\n          return takeLatest('FETCH_ACTIVE_ARTWORK', fetchActiveArtwork);\n\n        case 6:\n          _context.next = 8;\n          return takeLatest('FETCH_ACTIVE_ARTWORK_BY_USER', fetchActiveArtworkByUser);\n\n        case 8:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n} //input: action.payload.userId  -- this is the logged in user ID\n//what it does:  discover all categories from other artists\n//output: category list (NOT including categories from currently logged-in user)  \n//                  -- this is for the discover feature)\n\n\nfunction fetchActiveCategory(action) {\n  var response;\n  return _regeneratorRuntime.wrap(function fetchActiveCategory$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          console.log(\"inside fetchActiveCategory all\");\n          _context2.prev = 1;\n          _context2.next = 4;\n          return axios.get(\"/api/dpcatergory/\".concat(action.payload.userId));\n\n        case 4:\n          response = _context2.sent;\n          _context2.next = 7;\n          return put({\n            type: 'SET_ACTIVE_CATEGORY',\n            payload: response.data\n          });\n\n        case 7:\n          _context2.next = 12;\n          break;\n\n        case 9:\n          _context2.prev = 9;\n          _context2.t0 = _context2[\"catch\"](1);\n          console.log('fetchActiveCategory get request failed', _context2.t0);\n\n        case 12:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[1, 9]]);\n} //input: action.payload.discover_userId  -- this is the user ID select from the drop-down list\n//what it does:  discover all categories from for this selected user\n//output: category list for this user (discover_userId)\n\n\nfunction fetchActiveCategoryByUser(action) {\n  var response;\n  return _regeneratorRuntime.wrap(function fetchActiveCategoryByUser$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          console.log(\"inside fetchActiveCategoryByUser all\");\n          _context3.prev = 1;\n          _context3.next = 4;\n          return axios.get(\"/api/dpcategory/user/\".concat(action.payload.discover_userId));\n\n        case 4:\n          response = _context3.sent;\n          console.log('RESPONSE!!!!!!!!', response.data);\n          _context3.next = 8;\n          return put({\n            type: 'SET_ACTIVE_CATEGORY',\n            payload: response.data\n          });\n\n        case 8:\n          _context3.next = 13;\n          break;\n\n        case 10:\n          _context3.prev = 10;\n          _context3.t0 = _context3[\"catch\"](1);\n          console.log('fetchActiveCategoryByUser get request failed', _context3.t0);\n\n        case 13:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[1, 10]]);\n} //input: action.payload.userId  -- this is the currently logged in user ID\n//       action.payload.categoryId  -- this is the categoryId selected by user from category list\n//what it does:  get all artowrks from all other artists (not including currently logged in user) \n//               and category_id=action.payload.categoryId\n//output: artwork list from others and of the type of categoryId\n\n\nfunction fetchActiveArtwork(action) {\n  var data, response;\n  return _regeneratorRuntime.wrap(function fetchActiveArtwork$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          data = action.payload;\n          console.log('start of fetchActiveArtwork', data);\n          _context4.prev = 2;\n          _context4.next = 5;\n          return axios.get(\"/api/dpartwork/userId=\".concat(data.userId, \"/categoryId=\").concat(data.categoryId));\n\n        case 5:\n          response = _context4.sent;\n          _context4.next = 8;\n          return put({\n            type: 'SET_ARTWORK',\n            payload: response.data\n          });\n\n        case 8:\n          _context4.next = 13;\n          break;\n\n        case 10:\n          _context4.prev = 10;\n          _context4.t0 = _context4[\"catch\"](2);\n          console.log('fetchActiveArtwork get request failed', _context4.t0);\n\n        case 13:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[2, 10]]);\n} //input: action.payload.userId  -- this is the currently logged in user ID\n//       action.payload.categoryId  -- this is the categoryId selected by user from category list\n//       action.payload.discover_userId  -- this is the user ID select from the user drop-down list\n//what it does:  get all artowrks from artist (discover_userId) \n//               and category_id=action.payload.categoryId\n//               action.payload.userId is used to calculate favorite count\n//output: artwork list from artist discover_userId and of the category_id = action.payload.categoryId\n\n\nfunction fetchActiveArtworkByUser(action) {\n  var data, response;\n  return _regeneratorRuntime.wrap(function fetchActiveArtworkByUser$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          data = action.payload;\n          console.log('start of fetchActiveArtworkByUser', data);\n          _context5.prev = 2;\n          _context5.next = 5;\n          return axios.get(\"/api/dpartwork/user/userId=\".concat(data.userId, \"/categoryId=\").concat(data.categoryId, \"/discover_userId=\").concat(data.discover_userId));\n\n        case 5:\n          response = _context5.sent;\n          console.log('response is:', response);\n          _context5.next = 9;\n          return put({\n            type: 'SET_ARTWORK',\n            payload: response.data\n          });\n\n        case 9:\n          _context5.next = 14;\n          break;\n\n        case 11:\n          _context5.prev = 11;\n          _context5.t0 = _context5[\"catch\"](2);\n          console.log('fetchActiveArtworkByUser get request failed', _context5.t0);\n\n        case 14:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[2, 11]]);\n}\n\nexport default dpCategorySaga;","map":{"version":3,"sources":["/Users/j.lin/prime/tier3/art-galore-solo/src/redux/sagas/dpcategory.saga.js"],"names":["dpCategorySaga","fetchActiveCategory","fetchActiveCategoryByUser","fetchActiveArtwork","fetchActiveArtworkByUser","axios","put","takeLatest","action","console","log","get","payload","userId","response","type","data","discover_userId","categoryId"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { put, takeLatest } from 'redux-saga/effects';\n\n// Creates categorySAGA Generator function\nfunction* dpCategorySaga() {\n  yield takeLatest('FETCH_ACTIVE_CATEGORY', fetchActiveCategory);\n  yield takeLatest('FETCH_ACTIVE_CATEGORY_BY_USER', fetchActiveCategoryByUser);\n\n  yield takeLatest('FETCH_ACTIVE_ARTWORK', fetchActiveArtwork);\n  yield takeLatest('FETCH_ACTIVE_ARTWORK_BY_USER', fetchActiveArtworkByUser);\n}\n\n//input: action.payload.userId  -- this is the logged in user ID\n//what it does:  discover all categories from other artists\n//output: category list (NOT including categories from currently logged-in user)  \n//                  -- this is for the discover feature)\n\nfunction* fetchActiveCategory(action) {\n  console.log(\"inside fetchActiveCategory all\");\n    try {\n      const response = yield axios.get(`/api/dpcatergory/${action.payload.userId}`);\n\n      // now that the session has given us a user object\n      // with an id and username set the client-side user object to let\n      // the client-side code know the user is logged in\n      yield put({ type: 'SET_ACTIVE_CATEGORY', payload: response.data });\n    } catch (error) {\n      console.log('fetchActiveCategory get request failed', error);\n    }\n}\n\n\n\n//input: action.payload.discover_userId  -- this is the user ID select from the drop-down list\n//what it does:  discover all categories from for this selected user\n//output: category list for this user (discover_userId)\n\nfunction* fetchActiveCategoryByUser(action) {\n  console.log(\"inside fetchActiveCategoryByUser all\");\n    try {\n      const response = yield axios.get(`/api/dpcategory/user/${action.payload.discover_userId}`);\n      console.log('RESPONSE!!!!!!!!', response.data);\n      yield put({ type: 'SET_ACTIVE_CATEGORY', payload: response.data });\n    } catch (error) {\n      console.log('fetchActiveCategoryByUser get request failed', error);\n    }\n}\n\n//input: action.payload.userId  -- this is the currently logged in user ID\n//       action.payload.categoryId  -- this is the categoryId selected by user from category list\n//what it does:  get all artowrks from all other artists (not including currently logged in user) \n//               and category_id=action.payload.categoryId\n//output: artwork list from others and of the type of categoryId\n\nfunction* fetchActiveArtwork(action) {\n  const data = action.payload\n  console.log('start of fetchActiveArtwork', data);\n\n  try {\n    const response = yield axios.get(`/api/dpartwork/userId=${data.userId}/categoryId=${data.categoryId}`);\n\n    yield put({ type: 'SET_ARTWORK', payload: response.data });\n  } catch (error) {\n    console.log('fetchActiveArtwork get request failed', error);\n  }\n}\n\n\n//input: action.payload.userId  -- this is the currently logged in user ID\n//       action.payload.categoryId  -- this is the categoryId selected by user from category list\n//       action.payload.discover_userId  -- this is the user ID select from the user drop-down list\n//what it does:  get all artowrks from artist (discover_userId) \n//               and category_id=action.payload.categoryId\n//               action.payload.userId is used to calculate favorite count\n//output: artwork list from artist discover_userId and of the category_id = action.payload.categoryId\n\nfunction* fetchActiveArtworkByUser(action) {\n  const data = action.payload\n  console.log('start of fetchActiveArtworkByUser', data);\n\n  try {\n    const response = yield axios.get(`/api/dpartwork/user/userId=${data.userId}/categoryId=${data.categoryId}/discover_userId=${data.discover_userId}`);\n    console.log('response is:', response);\n    yield put({ type: 'SET_ARTWORK', payload: response.data });\n  } \n  catch (error) {\n    console.log('fetchActiveArtworkByUser get request failed', error);\n  }\n}\n\nexport default dpCategorySaga;\n"]},"metadata":{},"sourceType":"module"}